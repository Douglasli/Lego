//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace sdkBasicCameraCS.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPhoneService")]
    public interface IPhoneService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhoneService/StartSession", ReplyAction="http://tempuri.org/IPhoneService/StartSessionResponse")]
        System.IAsyncResult BeginStartSession(long seq, int width, int height, System.AsyncCallback callback, object asyncState);
        
        void EndStartSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IPhoneService/SendImage")]
        System.IAsyncResult BeginSendImage(long seq, byte[] image, System.AsyncCallback callback, object asyncState);
        
        void EndSendImage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhoneServiceChannel : sdkBasicCameraCS.ServiceReference1.IPhoneService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhoneServiceClient : System.ServiceModel.ClientBase<sdkBasicCameraCS.ServiceReference1.IPhoneService>, sdkBasicCameraCS.ServiceReference1.IPhoneService {
        
        private BeginOperationDelegate onBeginStartSessionDelegate;
        
        private EndOperationDelegate onEndStartSessionDelegate;
        
        private System.Threading.SendOrPostCallback onStartSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendImageDelegate;
        
        private EndOperationDelegate onEndSendImageDelegate;
        
        private System.Threading.SendOrPostCallback onSendImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PhoneServiceClient() {
        }
        
        public PhoneServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhoneServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendImageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult sdkBasicCameraCS.ServiceReference1.IPhoneService.BeginStartSession(long seq, int width, int height, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartSession(seq, width, height, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void sdkBasicCameraCS.ServiceReference1.IPhoneService.EndStartSession(System.IAsyncResult result) {
            base.Channel.EndStartSession(result);
        }
        
        private System.IAsyncResult OnBeginStartSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long seq = ((long)(inValues[0]));
            int width = ((int)(inValues[1]));
            int height = ((int)(inValues[2]));
            return ((sdkBasicCameraCS.ServiceReference1.IPhoneService)(this)).BeginStartSession(seq, width, height, callback, asyncState);
        }
        
        private object[] OnEndStartSession(System.IAsyncResult result) {
            ((sdkBasicCameraCS.ServiceReference1.IPhoneService)(this)).EndStartSession(result);
            return null;
        }
        
        private void OnStartSessionCompleted(object state) {
            if ((this.StartSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartSessionAsync(long seq, int width, int height) {
            this.StartSessionAsync(seq, width, height, null);
        }
        
        public void StartSessionAsync(long seq, int width, int height, object userState) {
            if ((this.onBeginStartSessionDelegate == null)) {
                this.onBeginStartSessionDelegate = new BeginOperationDelegate(this.OnBeginStartSession);
            }
            if ((this.onEndStartSessionDelegate == null)) {
                this.onEndStartSessionDelegate = new EndOperationDelegate(this.OnEndStartSession);
            }
            if ((this.onStartSessionCompletedDelegate == null)) {
                this.onStartSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartSessionCompleted);
            }
            base.InvokeAsync(this.onBeginStartSessionDelegate, new object[] {
                        seq,
                        width,
                        height}, this.onEndStartSessionDelegate, this.onStartSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult sdkBasicCameraCS.ServiceReference1.IPhoneService.BeginSendImage(long seq, byte[] image, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendImage(seq, image, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void sdkBasicCameraCS.ServiceReference1.IPhoneService.EndSendImage(System.IAsyncResult result) {
            base.Channel.EndSendImage(result);
        }
        
        private System.IAsyncResult OnBeginSendImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long seq = ((long)(inValues[0]));
            byte[] image = ((byte[])(inValues[1]));
            return ((sdkBasicCameraCS.ServiceReference1.IPhoneService)(this)).BeginSendImage(seq, image, callback, asyncState);
        }
        
        private object[] OnEndSendImage(System.IAsyncResult result) {
            ((sdkBasicCameraCS.ServiceReference1.IPhoneService)(this)).EndSendImage(result);
            return null;
        }
        
        private void OnSendImageCompleted(object state) {
            if ((this.SendImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendImageAsync(long seq, byte[] image) {
            this.SendImageAsync(seq, image, null);
        }
        
        public void SendImageAsync(long seq, byte[] image, object userState) {
            if ((this.onBeginSendImageDelegate == null)) {
                this.onBeginSendImageDelegate = new BeginOperationDelegate(this.OnBeginSendImage);
            }
            if ((this.onEndSendImageDelegate == null)) {
                this.onEndSendImageDelegate = new EndOperationDelegate(this.OnEndSendImage);
            }
            if ((this.onSendImageCompletedDelegate == null)) {
                this.onSendImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendImageCompleted);
            }
            base.InvokeAsync(this.onBeginSendImageDelegate, new object[] {
                        seq,
                        image}, this.onEndSendImageDelegate, this.onSendImageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override sdkBasicCameraCS.ServiceReference1.IPhoneService CreateChannel() {
            return new PhoneServiceClientChannel(this);
        }
        
        private class PhoneServiceClientChannel : ChannelBase<sdkBasicCameraCS.ServiceReference1.IPhoneService>, sdkBasicCameraCS.ServiceReference1.IPhoneService {
            
            public PhoneServiceClientChannel(System.ServiceModel.ClientBase<sdkBasicCameraCS.ServiceReference1.IPhoneService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginStartSession(long seq, int width, int height, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = seq;
                _args[1] = width;
                _args[2] = height;
                System.IAsyncResult _result = base.BeginInvoke("StartSession", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartSession", _args, result);
            }
            
            public System.IAsyncResult BeginSendImage(long seq, byte[] image, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = seq;
                _args[1] = image;
                System.IAsyncResult _result = base.BeginInvoke("SendImage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendImage", _args, result);
            }
        }
    }
}
